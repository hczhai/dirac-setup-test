name: build

on:
  push:
    branches: [ master ]
    tags:
      - v*
      - p*
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    name: build ${{ matrix.python }} ${{ matrix.os }} ${{ matrix.plat }} ${{ matrix.parallel }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python: [ 3.7, 3.9 ]
        manylinux: [ 2010 ]
        plat: [ x86_64 ]
        parallel: [ serial ]
        exclude:
          - os: macos-latest
            parallel: mpi
          - os: ubuntu-latest
            python: 3.9
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: install requirements
        env:
          MKLROOT: ~/.local
        run: |
          export PYT=$(which python)
          python -m pip install pip build twine sphinx --upgrade
          python -m pip install mkl==2019 mkl-include intel-openmp cmake==3.17
          git clone --recursive https://gitlab.com/dirac/dirac.git dirac22
          cd dirac22
          git checkout v22.0
          cd ..
          cp -r dirac22/* .
          cp -r dirac22/basis pydirac22/basis
          cp -r dirac22/basis_dalton pydirac22/basis_dalton
          cp -r dirac22/basis_ecp pydirac22/basis_ecp
          cp -r dirac22/utils/DIRACschema.txt pydirac22/DIRACschema.txt

      - name: build wheels (macos)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest'
        env:
          TAG_STRING: ${{ github.event.ref }}
        run: |
          brew update
          brew install llvm libomp
          brew install hdf5
          brew reinstall gcc
          brew install gnu-sed
          export CPP=/usr/local/opt/llvm/bin/clang
          export PATH=/usr/local/opt/gnu-sed/bin:$PATH
          which gcc
          which gfortran
          echo ${TAG_STRING:11}
          gsed -i "s/env python/env python3/" pam.in
          gsed -i 's/self.copy_file(self.dirac_exe/os.symlink(self.dirac_exe/g' pam.in
          gsed -i '/pam_directory =/a \import pydirac22\ndata_directory = os.path.dirname(pydirac22.__file__)' pam.in
          gsed -i '/basis_.*dir=/s/pam_directory/data_directory/' pam.in
          gsed -i '/DIRACschema/s/pam_directory/data_directory/' pam.in
          gsed -i '/sorting_wrt_energy =/s/false/true/' utils/dirac_mointegral_export.F90
          gsed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          python -m pip install wheel
          python -m pip install cmake --upgrade
          python -m pip wheel . -w ./dist --no-deps

      - name: prepare build wheels (manylinux)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
        env:
          TAG_STRING: ${{ github.event.ref }}
        run: |
          echo ${TAG_STRING:11}
          sed -i "s/env python/env python3/" pam.in
          sed -i 's/self.copy_file(self.dirac_exe/os.symlink(self.dirac_exe/g' pam.in
          sed -i '/pam_directory =/a \import pydirac22\ndata_directory = os.path.dirname(pydirac22.__file__)' pam.in
          sed -i '/basis_.*dir=/s/pam_directory/data_directory/' pam.in
          sed -i '/DIRACschema/s/pam_directory/data_directory/' pam.in
          sed -i '/sorting_wrt_energy =/s/false/true/' utils/dirac_mointegral_export.F90
          sed -i "s/version=.*/version='${TAG_STRING:11}',/" setup.py
          cp ./.github/actions/build-wheel/Dockerfile.manylinux${{ matrix.manylinux }} ./.github/actions/build-wheel/Dockerfile

      - name: build wheels (manylinux)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
        uses: ./.github/actions/build-wheel
        with:
          python-version: ${{ matrix.python }}
          parallel: ${{ matrix.parallel }}

      - name: release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*

      - name: upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ matrix.parallel }}
          path: dist
          retention-days: 2

